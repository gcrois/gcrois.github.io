digraph {
    #layout="circo";
    #layout="fdp";
    #rankdir="LR";
    rankdir="BT";
    #concentrate=true;

    # CLUSTERS

    subgraph cluster_0 {
        label="Templates";
        
        array [label="array[T]", style="dashed"];
        dict [label="dict[K, V]", style="dashed"];
        adjgraph [label="adjgraph[N, E]", style="dashed"];
    }

    # NODES (FORMS)

    any [color="pink", style="filled"];

    G [label="graph[N, E]"];
    map [label="map[K, V]"];
    list [label="list[T]"];
    iter [label="iter[T]"];
    maybe [label="maybe[T]"];

    iterdfs [label="iter.dfs[N, E]"];

    ReadIO [label="ReadIO[T]"];
    WriteIO [label="WriteIO[T]"];
    IO [label="IO[T]"];



    # NODES (TYPES)

    u8, s32, zint [style="filled"];
    f32, f64, zfloat [style="filled"];

    string [style="filled"];

    array0 [label="array[s32]", style="filled"];
    array1 [label="array[array[s32]]", style="filled"];
    dict0 [label="dict[string, f32]", style="filled"];
    dict1 [label="dict[string, any]", style="filled"];
    adjgraph0 [label="adjgraph[string, f32]", style="filled"];



    # EDGES (SUBTYPE)

    int, float -> real -> number -> any;
    f32, f64, zfloat -> float;
    u8, s32, zint -> int;

    maybe -> any;
    iter -> maybe;
    maybe -> iter;
    iterdfs -> iter [label="(N, list[(N, E)])"];
    iterdfs -> iter [label="N"];

    G -> list [label="nodes->N"];
    G -> list [label="edges->E"];

    G -> iterdfs;

    G -> map [label="N, (E, list[N])"];
    #G -> map [label="N, E, list[N]"];

    iter -> any;
    map -> any;

    # self loop, since iterables can be enumerated
    iter -> iter [label="(int, T)"];

    IO -> ReadIO, WriteIO;
    ReadIO -> iter;
    WriteIO -> any;

    list -> iter;

    list -> map [label="int, T"];
    map -> list [label="(K, V)"];

    string -> list [label="char"];

    array0 -> list [label="s32"];
    array1 -> list [label="array[s32]"];

    adjgraph0 -> G [label="string, f32"];

    dict0 -> map [label="string, f32"];
    dict1 -> map [label="string, any"];

    # EDGES (DECAY)

    array0 -> s32 [style="dashed"];
    array1 -> array0 [style="dashed"];

    # EDGES (TEMPLATE)

    adjgraph -> adjgraph0 [style="dotted", arrowhead="none"];

    array -> array0, array1 [style="dotted", arrowhead="none"];

    dict -> dict0, dict1 [style="dotted", arrowhead="none"];
}
